// Syst√®me de monitoring IA pour le chatbot
class AIMonitoring {
  constructor() {
    this.metrics = {
      functionCalls: new Map(),
      responseTimes: [],
      userSatisfaction: [],
      errorRates: new Map(),
      functionAccuracy: new Map(),
      conversationFlow: [],
      cacheHitRate: 0,
      totalRequests: 0,
      successfulRequests: 0,
      safetyValidations: [],
    };

    // Base de connaissances RAG
    this.knowledgeBase = {
      documents: new Map(),
      categories: new Set(),
      tags: new Set(),
      totalWords: 0,
    };

    this.startTime = Date.now();
    this.sessionId = this.generateSessionId();
    
    // Initialiser avec quelques documents de base
    this.initializeKnowledgeBase();
  }

  // G√©n√©rer un ID de session unique
  generateSessionId() {
    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  // Enregistrer un appel de fonction
  recordFunctionCall(functionName, args, response, executionTime) {
    if (!this.metrics.functionCalls.has(functionName)) {
      this.metrics.functionCalls.set(functionName, {
        count: 0,
        totalExecutionTime: 0,
        averageExecutionTime: 0,
        lastCalled: null,
        successRate: 0,
        errors: 0,
        args: [],
        responses: [],
      });
    }

    const functionStats = this.metrics.functionCalls.get(functionName);
    functionStats.count++;
    functionStats.totalExecutionTime += executionTime;
    functionStats.averageExecutionTime =
      functionStats.totalExecutionTime / functionStats.count;
    functionStats.lastCalled = new Date();
    functionStats.args.push(args);
    functionStats.responses.push(response);

    // V√©rifier si la r√©ponse est valide
    const isValidResponse = this.validateFunctionResponse(
      functionName,
      response
    );
    if (isValidResponse) {
      functionStats.successRate =
        ((functionStats.count - functionStats.errors) / functionStats.count) *
        100;
    } else {
      functionStats.errors++;
      functionStats.successRate =
        ((functionStats.count - functionStats.errors) / functionStats.count) *
        100;
    }

  }

  // Enregistrer le temps de r√©ponse
  recordResponseTime(responseTime) {
    this.metrics.responseTimes.push({
      timestamp: Date.now(),
      responseTime,
      sessionId: this.sessionId,
    });

    // Garder seulement les 1000 derni√®res mesures
    if (this.metrics.responseTimes.length > 1000) {
      this.metrics.responseTimes.shift();
    }
  }

  // Enregistrer la satisfaction utilisateur (bas√©e sur les interactions)
  recordUserSatisfaction(message, response, interactionType) {
    const satisfaction = this.calculateSatisfactionScore(
      message,
      response,
      interactionType
    );
    this.metrics.userSatisfaction.push({
      timestamp: Date.now(),
      satisfaction,
      message,
      response,
      interactionType,
    });

    // Garder seulement les 500 derni√®res mesures
    if (this.metrics.userSatisfaction.length > 500) {
      this.metrics.userSatisfaction.shift();
    }
  }

  // Calculer un score de satisfaction bas√© sur l'interaction
  calculateSatisfactionScore(message, response, interactionType) {
    let score = 0.5; // Score de base

    // Facteurs positifs
    if (
      response.includes('üí™') ||
      response.includes('üî•') ||
      response.includes('‚úÖ')
    )
      score += 0.2;
    if (response.length > 100) score += 0.1; // R√©ponse d√©taill√©e
    if (response.includes('**') && response.includes('**')) score += 0.1; // Formatage
    if (interactionType === 'function_call') score += 0.2; // Utilisation de fonction

    // Facteurs n√©gatifs
    if (response.includes('Erreur') || response.includes('error')) score -= 0.3;
    if (response.length < 20) score -= 0.2; // R√©ponse trop courte
    if (response.includes('non impl√©ment√©e')) score -= 0.4;

    return Math.max(0, Math.min(1, score)); // Normaliser entre 0 et 1
  }

  // Enregistrer une erreur
  recordError(functionName, error, context) {
    if (!this.metrics.errorRates.has(functionName)) {
      this.metrics.errorRates.set(functionName, []);
    }

    this.metrics.errorRates.get(functionName).push({
      timestamp: Date.now(),
      error: error.message || error,
      context,
      sessionId: this.sessionId,
    });
  }

  // Enregistrer le flux de conversation
  recordConversationFlow(userMessage, assistantResponse, functionUsed = null) {
    this.metrics.conversationFlow.push({
      timestamp: Date.now(),
      userMessage: userMessage.substring(0, 100), // Limiter la taille
      assistantResponse: assistantResponse.substring(0, 200), // Limiter la taille
      functionUsed,
      sessionId: this.sessionId,
    });

    // Garder seulement les 200 derni√®res interactions
    if (this.metrics.conversationFlow.length > 200) {
      this.metrics.conversationFlow.shift();
    }
  }

  // Mettre √† jour les statistiques de cache
  updateCacheStats(hit, totalRequests) {
    this.metrics.cacheHitRate = (hit / totalRequests) * 100;
    this.metrics.totalRequests = totalRequests;
  }

  // Enregistrer une requ√™te r√©ussie
  recordSuccessfulRequest() {
    this.metrics.successfulRequests++;
  }

  // Valider la r√©ponse d'une fonction
  validateFunctionResponse(functionName, response) {
    if (!response || typeof response !== 'string') return false;

    // V√©rifications sp√©cifiques par fonction
    switch (functionName) {
      case 'generate_personalized_workout':
        return response.includes('Exercices') || response.includes('S√©ance');
      case 'analyze_workout_performance':
        return response.includes('Analyse') || response.includes('Performance');
      case 'nutrition_recommendations':
        return response.includes('Nutrition') || response.includes('Calories');
      case 'progress_analysis':
        return (
          response.includes('Progression') || response.includes('M√©triques')
        );
      case 'recovery_recommendations':
        return response.includes('R√©cup√©ration') || response.includes('Repos');
      case 'exercise_form_analysis':
        return response.includes('Forme') || response.includes('Technique');
      case 'motivation_boost':
        return (
          response.includes('Motivation') || response.includes('Strat√©gies')
        );
      default:
        return response.length > 10; // R√©ponse minimale
    }
  }

  // Obtenir les statistiques globales
  getGlobalStats() {
    const avgResponseTime =
      this.metrics.responseTimes.length > 0
        ? this.metrics.responseTimes.reduce(
            (sum, rt) => sum + rt.responseTime,
            0
          ) / this.metrics.responseTimes.length
        : 0;

    const avgSatisfaction =
      this.metrics.userSatisfaction.length > 0
        ? this.metrics.userSatisfaction.reduce(
            (sum, us) => sum + us.satisfaction,
            0
          ) / this.metrics.userSatisfaction.length
        : 0;

    const successRate =
      this.metrics.totalRequests > 0
        ? (this.metrics.successfulRequests / this.metrics.totalRequests) * 100
        : 0;

    return {
      sessionId: this.sessionId,
      uptime: Date.now() - this.startTime,
      totalRequests: this.metrics.totalRequests,
      successfulRequests: this.metrics.successfulRequests,
      successRate: successRate.toFixed(2) + '%',
      averageResponseTime: Math.round(avgResponseTime) + 'ms',
      averageSatisfaction: (avgSatisfaction * 100).toFixed(1) + '%',
      cacheHitRate: this.metrics.cacheHitRate.toFixed(1) + '%',
      functionCallCount: this.metrics.functionCalls.size,
      totalFunctionCalls: Array.from(
        this.metrics.functionCalls.values()
      ).reduce((sum, fc) => sum + fc.count, 0),
    };
  }

  // Obtenir les statistiques par fonction
  getFunctionStats(functionName = null) {
    if (functionName) {
      const stats = this.metrics.functionCalls.get(functionName);
      if (!stats) return null;

      return {
        name: functionName,
        count: stats.count,
        averageExecutionTime: Math.round(stats.averageExecutionTime) + 'ms',
        successRate: stats.successRate.toFixed(1) + '%',
        lastCalled: stats.lastCalled,
        errorCount: stats.errors,
      };
    }

    // Statistiques pour toutes les fonctions
    return Array.from(this.metrics.functionCalls.entries()).map(
      ([name, stats]) => ({
        name,
        count: stats.count,
        averageExecutionTime: Math.round(stats.averageExecutionTime) + 'ms',
        successRate: stats.successRate.toFixed(1) + '%',
        lastCalled: stats.lastCalled,
        errorCount: stats.errors,
      })
    );
  }

  // Obtenir les tendances de performance
  getPerformanceTrends() {
    const recentResponseTimes = this.metrics.responseTimes.slice(-50);
    const recentSatisfaction = this.metrics.userSatisfaction.slice(-50);

    const responseTimeTrend =
      recentResponseTimes.length > 1
        ? this.calculateTrend(recentResponseTimes.map((rt) => rt.responseTime))
        : 'stable';

    const satisfactionTrend =
      recentSatisfaction.length > 1
        ? this.calculateTrend(recentSatisfaction.map((us) => us.satisfaction))
        : 'stable';

    return {
      responseTimeTrend,
      satisfactionTrend,
      recentPerformance: {
        avgResponseTime:
          recentResponseTimes.length > 0
            ? Math.round(
                recentResponseTimes.reduce(
                  (sum, rt) => sum + rt.responseTime,
                  0
                ) / recentResponseTimes.length
              )
            : 0,
        avgSatisfaction:
          recentSatisfaction.length > 0
            ? (
                (recentSatisfaction.reduce(
                  (sum, us) => sum + us.satisfaction,
                  0
                ) /
                  recentSatisfaction.length) *
                100
              ).toFixed(1)
            : 0,
      },
    };
  }

  // Calculer la tendance (am√©lioration, d√©t√©rioration, stable)
  calculateTrend(values) {
    if (values.length < 2) return 'stable';

    const firstHalf = values.slice(0, Math.floor(values.length / 2));
    const secondHalf = values.slice(Math.floor(values.length / 2));

    const firstAvg =
      firstHalf.reduce((sum, val) => sum + val, 0) / firstHalf.length;
    const secondAvg =
      secondHalf.reduce((sum, val) => sum + val, 0) / secondHalf.length;

    const change = ((secondAvg - firstAvg) / firstAvg) * 100;

    if (change > 5) return 'am√©lioration';
    if (change < -5) return 'd√©t√©rioration';
    return 'stable';
  }

  // Obtenir les alertes de performance
  getPerformanceAlerts() {
    const alerts = [];
    const globalStats = this.getGlobalStats();
    const functionStats = this.getFunctionStats();

    // Alertes de temps de r√©ponse
    const avgResponseTime = parseFloat(globalStats.averageResponseTime);
    if (avgResponseTime > 5000) {
      alerts.push({
        type: 'warning',
        message: `Temps de r√©ponse √©lev√©: ${avgResponseTime}ms`,
        severity: 'medium',
      });
    }

    // Alertes de satisfaction
    const avgSatisfaction = parseFloat(globalStats.averageSatisfaction);
    if (avgSatisfaction < 60) {
      alerts.push({
        type: 'error',
        message: `Satisfaction utilisateur faible: ${avgSatisfaction}%`,
        severity: 'high',
      });
    }

    // Alertes de taux de succ√®s
    const successRate = parseFloat(globalStats.successRate);
    if (successRate < 90) {
      alerts.push({
        type: 'error',
        message: `Taux de succ√®s faible: ${successRate}%`,
        severity: 'high',
      });
    }

    // Alertes par fonction
    functionStats.forEach((fn) => {
      const successRate = parseFloat(fn.successRate);
      if (successRate < 80) {
        alerts.push({
          type: 'warning',
          message: `Fonction ${fn.name}: taux de succ√®s faible (${successRate}%)`,
          severity: 'medium',
        });
      }
    });

    return alerts;
  }

  // G√©n√©rer un rapport de performance
  generatePerformanceReport() {
    const globalStats = this.getGlobalStats();
    const functionStats = this.getFunctionStats();
    const trends = this.getPerformanceTrends();
    const alerts = this.getPerformanceAlerts();

    return {
      timestamp: new Date().toISOString(),
      sessionId: this.sessionId,
      globalStats,
      functionStats,
      trends,
      alerts,
      recommendations: this.generateRecommendations(
        globalStats,
        functionStats,
        trends
      ),
    };
  }

  // G√©n√©rer des recommandations d'am√©lioration
  generateRecommendations(globalStats, functionStats, trends) {
    const recommendations = [];

    // Recommandations bas√©es sur les performances
    if (parseFloat(globalStats.averageResponseTime) > 3000) {
      recommendations.push(
        'Optimiser le cache pour r√©duire les temps de r√©ponse'
      );
    }

    if (parseFloat(globalStats.averageSatisfaction) < 70) {
      recommendations.push('Am√©liorer la qualit√© des r√©ponses et le formatage');
    }

    if (parseFloat(globalStats.successRate) < 95) {
      recommendations.push("Renforcer la gestion d'erreurs et la validation");
    }

    // Recommandations bas√©es sur les tendances
    if (trends.responseTimeTrend === 'd√©t√©rioration') {
      recommendations.push(
        'Investigation n√©cessaire sur la d√©gradation des performances'
      );
    }

    if (trends.satisfactionTrend === 'd√©t√©rioration') {
      recommendations.push(
        'Analyser les r√©ponses r√©centes pour am√©liorer la satisfaction'
      );
    }

    // Recommandations par fonction
    functionStats.forEach((fn) => {
      if (parseFloat(fn.successRate) < 85) {
        recommendations.push(
          `Am√©liorer la fonction ${fn.name} (taux de succ√®s: ${fn.successRate})`
        );
      }
    });

    return recommendations;
  }

  // Sauvegarder les m√©triques
  saveMetrics() {
    try {
      const report = this.generatePerformanceReport();
      localStorage.setItem('ai_monitoring_report', JSON.stringify(report));
    } catch (error) {
      // Erreur lors de la sauvegarde des m√©triques
    }
  }

  // Charger les m√©triques sauvegard√©es
  loadMetrics() {
    try {
      const saved = localStorage.getItem('ai_monitoring_report');
      if (saved) {
        const report = JSON.parse(saved);
        return report;
      }
    } catch (error) {
      // Erreur lors du chargement des m√©triques
    }
    return null;
  }

  // R√©initialiser les m√©triques
  resetMetrics() {
    this.metrics = {
      functionCalls: new Map(),
      responseTimes: [],
      userSatisfaction: [],
      errorRates: new Map(),
      functionAccuracy: new Map(),
      conversationFlow: [],
      cacheHitRate: 0,
      totalRequests: 0,
      successfulRequests: 0,
      safetyValidations: [],
    };
    this.startTime = Date.now();
    this.sessionId = this.generateSessionId();
  }

  // Enregistrer une validation de s√©curit√©
  recordSafetyValidation(functionName, validation) {
    if (!this.metrics.safetyValidations) {
      this.metrics.safetyValidations = [];
    }

    this.metrics.safetyValidations.push({
      timestamp: Date.now(),
      functionName,
      validation,
      sessionId: this.sessionId,
    });

    // Garder seulement les 100 derni√®res validations
    if (this.metrics.safetyValidations.length > 100) {
      this.metrics.safetyValidations.shift();
    }
  }

  // Obtenir les statistiques de s√©curit√©
  getSafetyStats() {
    const validations = this.metrics.safetyValidations || [];

    if (!validations || validations.length === 0) {
      return {
        totalValidations: 0,
        averageSafetyScore: 100,
        criticalIssues: 0,
        warnings: 0,
        safeRecommendations: 0,
        safetyRate: 100,
      };
    }

    const totalValidations = validations.length;
    const averageSafetyScore =
      validations.reduce((sum, v) => sum + v.validation.safetyScore, 0) /
      totalValidations;
    const criticalIssues = validations.filter(
      (v) => v.validation.errors.length > 0
    ).length;
    const warnings = validations.filter(
      (v) => v.validation.warnings.length > 0
    ).length;
    const safeRecommendations = validations.filter(
      (v) => v.validation.safetyScore >= 90
    ).length;

    return {
      totalValidations,
      averageSafetyScore: Math.round(averageSafetyScore),
      criticalIssues,
      warnings,
      safeRecommendations,
      safetyRate: Math.round((safeRecommendations / totalValidations) * 100),
    };
  }

  // ===== FONCTIONS RAG =====

  // Initialiser la base de connaissances avec des documents de base
  initializeKnowledgeBase() {
    const baseDocuments = [
      {
        id: 'anatomy_muscles',
        title: 'Anatomie des muscles principaux',
        content: 'Les muscles principaux du corps humain incluent les pectoraux (poitrine), les dorsaux (dos), les delto√Ødes (√©paules), les biceps et triceps (bras), les quadriceps et ischio-jambiers (cuisses), les mollets et les abdominaux.',
        category: 'anatomy',
        tags: ['muscles', 'anatomie', 'corps humain']
      },
      {
        id: 'exercise_basic',
        title: 'Exercices de base pour d√©butants',
        content: 'Les exercices de base recommand√©s pour les d√©butants incluent les pompes pour les pectoraux, les squats pour les jambes, le gainage pour les abdominaux, et les tractions pour le dos.',
        category: 'exercises',
        tags: ['d√©butant', 'exercices', 'base']
      },
      {
        id: 'nutrition_basics',
        title: 'Bases de la nutrition sportive',
        content: 'Une nutrition sportive √©quilibr√©e inclut des prot√©ines (1,6-2,2g par kg de poids), des glucides complexes pour l\'√©nergie, et des lipides essentiels. L\'hydratation est cruciale.',
        category: 'nutrition',
        tags: ['nutrition', 'prot√©ines', 'hydratation']
      },
      {
        id: 'recovery_sleep',
        title: 'Importance du sommeil pour la r√©cup√©ration',
        content: 'Le sommeil est essentiel pour la r√©cup√©ration musculaire. 7-9 heures de sommeil de qualit√© permettent la synth√®se des prot√©ines et la r√©g√©n√©ration des tissus musculaires.',
        category: 'recovery',
        tags: ['sommeil', 'r√©cup√©ration', 'r√©g√©n√©ration']
      }
    ];

    baseDocuments.forEach(doc => {
      this.knowledgeBase.documents.set(doc.id, doc);
      this.knowledgeBase.categories.add(doc.category);
      doc.tags.forEach(tag => this.knowledgeBase.tags.add(tag));
      this.knowledgeBase.totalWords += doc.content.split(' ').length;
    });
  }

  // Obtenir les statistiques de la base de connaissances
  getKnowledgeBaseStats() {
    return {
      totalDocuments: this.knowledgeBase.documents.size,
      totalWords: this.knowledgeBase.totalWords,
      categories: Array.from(this.knowledgeBase.categories),
      tags: Array.from(this.knowledgeBase.tags),
      lastUpdated: new Date().toISOString()
    };
  }

  // Ajouter une connaissance personnalis√©e
  addCustomKnowledge(title, content, category, tags = []) {
    try {
      const id = `custom_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      const document = {
        id,
        title,
        content,
        category,
        tags: Array.isArray(tags) ? tags : [],
        createdAt: new Date().toISOString(),
        custom: true
      };

      this.knowledgeBase.documents.set(id, document);
      this.knowledgeBase.categories.add(category);
      tags.forEach(tag => this.knowledgeBase.tags.add(tag));
      this.knowledgeBase.totalWords += content.split(' ').length;
      
      return {
        success: true,
        documentId: id,
        message: 'Document ajout√© avec succ√®s'
      };
    } catch (error) {
      return {
        success: false,
        error: error.message || 'Erreur inconnue'
      };
    }
  }

  // Rechercher dans la base de connaissances
  searchKnowledgeBase(query, limit = 5) {
    const queryLower = query.toLowerCase();
    const results = [];

    this.knowledgeBase.documents.forEach((document, id) => {
      let score = 0;
      
      // Recherche dans le titre (poids plus √©lev√©)
      if (document.title.toLowerCase().includes(queryLower)) {
        score += 0.5;
      }
      
      // Recherche dans le contenu
      if (document.content.toLowerCase().includes(queryLower)) {
        score += 0.3;
      }
      
      // Recherche dans les tags
      document.tags.forEach(tag => {
        if (tag.toLowerCase().includes(queryLower)) {
          score += 0.2;
        }
      });

      // Recherche dans la cat√©gorie
      if (document.category.toLowerCase().includes(queryLower)) {
        score += 0.1;
      }

      if (score > 0) {
        results.push({
          document,
          score,
          matchedIn: this.getMatchedFields(document, queryLower)
        });
      }
    });

    // Trier par score d√©croissant et limiter les r√©sultats
    return results
      .sort((a, b) => b.score - a.score)
      .slice(0, limit);
  }

  // Obtenir les documents par cat√©gorie
  getKnowledgeByCategory(category, limit = 10) {
    const results = [];
    
    this.knowledgeBase.documents.forEach((document, id) => {
      if (document.category === category) {
        results.push({
          document,
          score: 1.0, // Score parfait pour les r√©sultats par cat√©gorie
          matchedIn: ['category']
        });
      }
    });

    return results.slice(0, limit);
  }

  // D√©terminer dans quels champs la requ√™te a √©t√© trouv√©e
  getMatchedFields(document, queryLower) {
    const matched = [];
    
    if (document.title.toLowerCase().includes(queryLower)) {
      matched.push('title');
    }
    if (document.content.toLowerCase().includes(queryLower)) {
      matched.push('content');
    }
    if (document.tags.some(tag => tag.toLowerCase().includes(queryLower))) {
      matched.push('tags');
    }
    if (document.category.toLowerCase().includes(queryLower)) {
      matched.push('category');
    }
    
    return matched;
  }
}

// Instance globale du monitoring
const aiMonitoring = new AIMonitoring();

export { AIMonitoring };
export default aiMonitoring;
