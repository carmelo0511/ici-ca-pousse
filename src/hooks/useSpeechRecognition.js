import { useState, useRef, useCallback, useEffect } from 'react';

export const useSpeechRecognition = () => {
  const [isListening, setIsListening] = useState(false);
  const [transcript, setTranscript] = useState('');
  const [isSupported, setIsSupported] = useState(false);
  const recognitionRef = useRef(null);
  const latestTranscriptRef = useRef('');

  // V√©rifier le support au montage du composant
  useEffect(() => {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    setIsSupported(!!SpeechRecognition);
  }, []);

  // V√©rifier si la reconnaissance vocale est support√©e
  const checkSupport = useCallback(() => {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    return !!SpeechRecognition;
  }, []);

  // Initialiser la reconnaissance vocale
  const initializeRecognition = useCallback(() => {
    if (!checkSupport()) return null;

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    const recognition = new SpeechRecognition();

    recognition.continuous = true;
    recognition.interimResults = true;
    recognition.lang = 'fr-FR';
    recognition.maxAlternatives = 1;

    return recognition;
  }, [checkSupport]);

  // D√©marrer l'√©coute
  const startListening = useCallback((onResult, onEnd) => {
    if (!isSupported) {
      console.warn('Speech recognition not supported');
      return false;
    }

    if (recognitionRef.current) {
      recognitionRef.current.stop();
    }

    const recognition = initializeRecognition();
    if (!recognition) return false;

    recognition.onstart = () => {
      setIsListening(true);
      setTranscript('');
      latestTranscriptRef.current = '';
    };

    recognition.onresult = (event) => {
      let finalTranscript = '';
      let interimTranscript = '';

      for (let i = event.resultIndex; i < event.results.length; i++) {
        const transcript = event.results[i][0].transcript;
        if (event.results[i].isFinal) {
          finalTranscript += transcript;
        } else {
          interimTranscript += transcript;
        }
      }

      const fullTranscript = finalTranscript || interimTranscript;
      setTranscript(fullTranscript);
      latestTranscriptRef.current = fullTranscript;

      if (onResult) {
        onResult(fullTranscript, event.results[event.results.length - 1].isFinal);
      }
    };

    recognition.onerror = (event) => {
      console.error('Speech recognition error:', event.error);
      setIsListening(false);
    };

    recognition.onend = () => {
      setIsListening(false);
      if (onEnd) {
        onEnd(latestTranscriptRef.current);
      }
    };

    recognitionRef.current = recognition;
    recognition.start();
    return true;
  }, [initializeRecognition, isSupported]);

  // Arr√™ter l'√©coute
  const stopListening = useCallback(() => {
    if (recognitionRef.current) {
      recognitionRef.current.stop();
      recognitionRef.current = null;
    }
    setIsListening(false);
  }, []);

  // Parser le texte pour extraire les exercices
  const parseExerciseFromSpeech = useCallback((text) => {
    const cleanText = text.toLowerCase().trim();
    console.log('üé§ Parsing speech:', cleanText);
    
    // Mapping complet bas√© sur la base de donn√©es des exercices
    const exerciseMapping = {
      // Pectoraux
      'pompes': 'Pompes',
      'pompe': 'Pompes', 
      'pomes': 'Pompes',
      'd√©velopp√© couch√©': 'D√©velopp√© couch√©',
      'developpe couche': 'D√©velopp√© couch√©',
      'develope couche': 'D√©velopp√© couch√©',
      'devole couche': 'D√©velopp√© couch√©',
      'd√©velopper coucher': 'D√©velopp√© couch√©',
      'developper coucher': 'D√©velopp√© couch√©',
      'devlopper coucher': 'D√©velopp√© couch√©',
      'd√©velopp√© coucher': 'D√©velopp√© couch√©',
      'developpe coucher': 'D√©velopp√© couch√©',
      'develope coucher': 'D√©velopp√© couch√©',
      'd√©velopper couch√©': 'D√©velopp√© couch√©',
      'developper couch√©': 'D√©velopp√© couch√©',
      'devlopper couch√©': 'D√©velopp√© couch√©',
      'devole couch√©': 'D√©velopp√© couch√©',
      'd√©velopp√© inclin√©': 'D√©velopp√© inclin√©',
      'developpe incline': 'D√©velopp√© inclin√©',
      'develope incline': 'D√©velopp√© inclin√©',
      'd√©velopper incliner': 'D√©velopp√© inclin√©',
      'developper incliner': 'D√©velopp√© inclin√©',
      'devlopper incliner': 'D√©velopp√© inclin√©',
      'devole incliner': 'D√©velopp√© inclin√©',
      'developpe inclin√©': 'D√©velopp√© inclin√©',
      'develope inclin√©': 'D√©velopp√© inclin√©',
      'd√©velopper inclin√©': 'D√©velopp√© inclin√©',
      'developper inclin√©': 'D√©velopp√© inclin√©',
      'devlopper inclin√©': 'D√©velopp√© inclin√©',
      'devole inclin√©': 'D√©velopp√© inclin√©',
      'd√©velopp√© d√©clin√©': 'D√©velopp√© d√©clin√©',
      'developpe decline': 'D√©velopp√© d√©clin√©',
      'develope decline': 'D√©velopp√© d√©clin√©',
      'd√©velopper d√©cliner': 'D√©velopp√© d√©clin√©',
      'developper decliner': 'D√©velopp√© d√©clin√©',
      'devlopper decliner': 'D√©velopp√© d√©clin√©',
      'devole decliner': 'D√©velopp√© d√©clin√©',
      'd√©velopp√© decliner': 'D√©velopp√© d√©clin√©',
      'developpe decliner': 'D√©velopp√© d√©clin√©',
      'develope decliner': 'D√©velopp√© d√©clin√©',
      'd√©velopp√© halt√®res': 'D√©velopp√© halt√®res',
      'developpe haltere': 'D√©velopp√© halt√®res',
      'develope haltere': 'D√©velopp√© halt√®res',
      'd√©velopper halt√®res': 'D√©velopp√© halt√®res',
      'developper haltere': 'D√©velopp√© halt√®res',
      'devlopper haltere': 'D√©velopp√© halt√®res',
      'devole haltere': 'D√©velopp√© halt√®res',
      'd√©velopp√© haltere': 'D√©velopp√© halt√®res',
      'developpe halteres': 'D√©velopp√© halt√®res',
      'develope halteres': 'D√©velopp√© halt√®res',
      'dips': 'Dips',
      '√©cart√© couch√©': '√âcart√© couch√©',
      'ecarte couche': '√âcart√© couch√©',
      '√©cart√© inclin√©': '√âcart√© inclin√©',
      'ecarte incline': '√âcart√© inclin√©',
      'pull-over': 'Pull-over',
      'pull over': 'Pull-over',
      'pec deck': 'Pec deck',
      
      // Dos
      'tractions': 'Tractions',
      'traction': 'Tractions',
      'tractions barre': 'Tractions',
      'traction barre': 'Tractions',
      'pull up': 'Tractions',
      'pull ups': 'Tractions',
      'pullup': 'Tractions',
      'pullups': 'Tractions',
      'tractions lest√©es': 'Tractions lest√©es',
      'traction lestee': 'Tractions lest√©es',
      'tractions assist√©es': 'Tractions assist√©es',
      'traction assistee': 'Tractions assist√©es',
      'rowing barre': 'Rowing barre',
      'rowing': 'Rowing barre',
      'rowing halt√®res': 'Rowing halt√®res',
      'rowing haltere': 'Rowing halt√®res',
      'tirage horizontal': 'Tirage horizontal',
      'tirage vertical': 'Tirage vertical',
      'soulev√© de terre': 'Soulev√© de terre',
      'souleve de terre': 'Soulev√© de terre',
      'rowing t-bar': 'Rowing T-bar',
      'rowing t bar': 'Rowing T-bar',
      'shrugs': 'Shrugs',
      'hyperextensions': 'Hyperextensions',
      'tirage poulie haute': 'Tirage poulie haute',
      
      // √âpaules
      'd√©velopp√© militaire': 'D√©velopp√© militaire',
      'developpe militaire': 'D√©velopp√© militaire',
      'develope militaire': 'D√©velopp√© militaire',
      '√©l√©vations lat√©rales': '√âl√©vations lat√©rales',
      'elevation laterale': '√âl√©vations lat√©rales',
      '√©l√©vation lat√©rale': '√âl√©vations lat√©rales',
      '√©l√©vations frontales': '√âl√©vations frontales',
      'elevation frontale': '√âl√©vations frontales',
      '√©l√©vation frontale': '√âl√©vations frontales',
      'oiseau': 'Oiseau',
      'd√©velopp√© arnold': 'D√©velopp√© Arnold',
      'developpe arnold': 'D√©velopp√© Arnold',
      'upright row': 'Upright row',
      'face pull': 'Face pull',
      'handstand push-up': 'Handstand push-up',
      
      // Biceps
      'curl barre': 'Curl barre',
      'curl': 'Curl barre',
      'curl halt√®res': 'Curl halt√®res',
      'curl haltere': 'Curl halt√®res',
      'curl marteau': 'Curl marteau',
      'curl concentr√©': 'Curl concentr√©',
      'curl concentre': 'Curl concentr√©',
      'curl pupitre': 'Curl pupitre',
      'curl 21': 'Curl 21',
      'traction supination': 'Traction supination',
      'curl c√¢ble': 'Curl c√¢ble',
      'curl cable': 'Curl c√¢ble',
      
      // Triceps
      'extension couch√©': 'Extension couch√©',
      'extension couche': 'Extension couch√©',
      'extension verticale': 'Extension verticale',
      'pompes diamant': 'Pompes diamant',
      'kick back': 'Kick back',
      'extension poulie haute': 'Extension poulie haute',
      'd√©velopp√© serr√©': 'D√©velopp√© serr√©',
      'developpe serre': 'D√©velopp√© serr√©',
      
      // Jambes
      'squat': 'Squat',
      'squats': 'Squat',
      'leg press': 'Leg press',
      'fentes': 'Fentes',
      'fente': 'Fentes',
      'leg curl': 'Leg curl',
      'leg extension': 'Leg extension',
      'soulev√© de terre roumain': 'Soulev√© de terre roumain',
      'souleve de terre roumain': 'Soulev√© de terre roumain',
      'mollets debout': 'Mollets debout',
      'mollets assis': 'Mollets assis',
      'hack squat': 'Hack squat',
      'goblet squat': 'Goblet squat',
      
      // Abdos
      'crunch': 'Crunch',
      'crunchs': 'Crunch',
      'planche': 'Planche',
      'gainage': 'Planche',
      'relev√© de jambes': 'Relev√© de jambes',
      'releve de jambes': 'Relev√© de jambes',
      'russian twist': 'Russian twist',
      'grimpeur': 'Grimpeur',
      'bicycle crunch': 'Bicycle crunch',
      'dead bug': 'Dead bug',
      'hanging knee raise': 'Hanging knee raise',
      
      // Cardio
      'course √† pied': 'Course √† pied',
      'course a pied': 'Course √† pied',
      'course': 'Course √† pied',
      'v√©lo': 'V√©lo',
      'velo': 'V√©lo',
      'elliptique': 'Elliptique',
      'rameur': 'Rameur',
      'tapis de course': 'Tapis de course',
      'v√©lo spinning': 'V√©lo spinning',
      'velo spinning': 'V√©lo spinning',
      'stepper': 'Stepper',
      'corde √† sauter': 'Corde √† sauter',
      'corde a sauter': 'Corde √† sauter',
      'burpees': 'Burpees',
      'sauts √©toiles': 'Sauts √©toiles',
      'sauts etoiles': 'Sauts √©toiles',
      'genoux hauts': 'Genoux hauts',
      'mont√©es de genoux': 'Mont√©es de genoux',
      'montees de genoux': 'Mont√©es de genoux',
      'sprint': 'Sprint',
      'marche rapide': 'Marche rapide',
      'natation': 'Natation',
      'aquabike': 'Aquabike',
      'hiit': 'HIIT',
      'tabata': 'Tabata'
    };

    // Tri des cl√©s par longueur d√©croissante pour v√©rifier les expressions longues d'abord
    const sortedKeys = Object.keys(exerciseMapping).sort((a, b) => b.length - a.length);
    
    console.log('üîç Checking against sorted keys:', sortedKeys.slice(0, 5));

    // Chercher une correspondance exacte d'abord
    for (const spokenName of sortedKeys) {
      if (cleanText === spokenName) {
        console.log('‚úÖ Exact match found:', spokenName, '->', exerciseMapping[spokenName]);
        return {
          name: exerciseMapping[spokenName],
          found: true,
          confidence: 1
        };
      }
    }

    // Ensuite chercher avec includes, toujours en commen√ßant par les plus longs
    for (const spokenName of sortedKeys) {
      if (cleanText.includes(spokenName)) {
        console.log('‚úÖ Partial match found:', spokenName, '->', exerciseMapping[spokenName]);
        return {
          name: exerciseMapping[spokenName],
          found: true,
          confidence: 1
        };
      }
    }

    // D√©tection intelligente par mots-cl√©s en dernier recours
    const keywordDetection = {
      // √âl√©vations en premier (priorit√© haute)
      '√âl√©vations lat√©rales': ['√©l√©vation', 'elevation', 'lat√©rale', 'laterale'],
      '√âl√©vations frontales': ['√©l√©vation', 'elevation', 'frontale', 'frontale'],
      
      // Rowing en premier (priorit√© haute) - avec d√©tection sp√©cifique
      'Rowing barre': ['rowing', 'roing', 'roin'],
      'Rowing halt√®res': ['rowing', 'roing', 'roin'],
      'Tractions': ['tractions', 'traction'],
      'Soulev√© de terre': ['soulev√©', 'souleve', 'soulev'],
      
      // D√©velopp√©s avec variations
      'D√©velopp√© couch√©': ['d√©velopp√©', 'developpe', 'develope', 'devole', 'd√©velopper', 'developper', 'devlopper'],
      'D√©velopp√© inclin√©': ['d√©velopp√©', 'developpe', 'develope', 'devole', 'd√©velopper', 'developper', 'devlopper'],
      'D√©velopp√© d√©clin√©': ['d√©velopp√©', 'developpe', 'develope', 'devole', 'd√©velopper', 'developper', 'devlopper'],
      'D√©velopp√© halt√®res': ['d√©velopp√©', 'developpe', 'develope', 'devole', 'd√©velopper', 'developper', 'devlopper'],
      
      // Autres exercices
      'Pompes': ['pompes', 'pompe', 'pomes'],
      'Squat': ['squats', 'squat'],
      'Curl barre': ['curl'],
      'Planche': ['gainage', 'planche'],
      'V√©lo': ['v√©lo', 'velo'],
      'Course √† pied': ['course']
    };

    // V√©rifier les mots-cl√©s en dernier recours
    for (const [exercise, keywords] of Object.entries(keywordDetection)) {
      for (const keyword of keywords) {
        if (cleanText.includes(keyword)) {
          // V√©rification sp√©ciale pour les √©l√©vations (priorit√© haute)
          if (exercise.includes('√âl√©vations')) {
            if (cleanText.includes('lat√©rale') || cleanText.includes('laterale')) {
              console.log('‚úÖ Keyword match found for √©l√©vations lat√©rales:', keyword);
              return {
                name: '√âl√©vations lat√©rales',
                found: true,
                confidence: 1
              };
            } else if (cleanText.includes('frontale') || cleanText.includes('frontale')) {
              console.log('‚úÖ Keyword match found for √©l√©vations frontales:', keyword);
              return {
                name: '√âl√©vations frontales',
                found: true,
                confidence: 1
              };
            }
          }
          // V√©rification sp√©ciale pour les d√©velopp√©s - seulement si le mot-cl√© est vraiment un d√©velopp√©
          else if (exercise.includes('D√©velopp√©') && (keyword.includes('d√©velopp') || keyword.includes('develo') || keyword.includes('devol'))) {
            if (cleanText.includes('inclin√©') || cleanText.includes('incline') || cleanText.includes('incliner')) {
              console.log('‚úÖ Keyword match found for d√©velopp√© inclin√©:', keyword);
              return {
                name: 'D√©velopp√© inclin√©',
                found: true,
                confidence: 1
              };
            } else if (cleanText.includes('d√©clin√©') || cleanText.includes('decline') || cleanText.includes('decliner')) {
              console.log('‚úÖ Keyword match found for d√©velopp√© d√©clin√©:', keyword);
              return {
                name: 'D√©velopp√© d√©clin√©',
                found: true,
                confidence: 1
              };
            } else if (cleanText.includes('halt√®res') || cleanText.includes('haltere')) {
              console.log('‚úÖ Keyword match found for d√©velopp√© halt√®res:', keyword);
              return {
                name: 'D√©velopp√© halt√®res',
                found: true,
                confidence: 1
              };
            } else if (cleanText.includes('couch√©') || cleanText.includes('couche') || cleanText.includes('coucher')) {
              console.log('‚úÖ Keyword match found for d√©velopp√© couch√©:', keyword);
              return {
                name: 'D√©velopp√© couch√©',
                found: true,
                confidence: 1
              };
            }
          } else if (exercise.includes('Curl') && keyword.includes('curl')) {
            if (cleanText.includes('halt√®res') || cleanText.includes('haltere')) {
              console.log('‚úÖ Keyword match found for curl halt√®res:', keyword);
              return {
                name: 'Curl halt√®res',
                found: true,
                confidence: 1
              };
            } else {
              console.log('‚úÖ Keyword match found for curl barre:', keyword);
              return {
                name: 'Curl barre',
                found: true,
                confidence: 1
              };
            }
          } else if (exercise.includes('Rowing')) {
            // Logique sp√©cifique pour distinguer rowing barre vs rowing halt√®res
            if (cleanText.includes('bar') || cleanText.includes('barre')) {
              console.log('‚úÖ Keyword match found for rowing barre:', keyword);
              return {
                name: 'Rowing barre',
                found: true,
                confidence: 1
              };
            } else if (cleanText.includes('halt√®res') || cleanText.includes('haltere')) {
              console.log('‚úÖ Keyword match found for rowing halt√®res:', keyword);
              return {
                name: 'Rowing halt√®res',
                found: true,
                confidence: 1
              };
            } else {
              // Par d√©faut, rowing barre
              console.log('‚úÖ Keyword match found for rowing barre (default):', keyword);
              return {
                name: 'Rowing barre',
                found: true,
                confidence: 1
              };
            }
          } else {
            console.log('‚úÖ Keyword match found:', keyword, '->', exercise);
            return {
              name: exercise,
              found: true,
              confidence: 1
            };
          }
        }
      }
    }

    console.log('‚ùå No match found, returning as custom exercise');
    // Si aucune correspondance, retourner le texte brut
    return {
      name: text.trim(),
      found: false,
      confidence: 0.5
    };
  }, []);

  // D√©terminer le groupe musculaire √† partir du nom de l'exercice
  const getMuscleGroupFromExercise = useCallback((exerciseName) => {
    const exerciseLower = exerciseName.toLowerCase();
    
    // Mapping pr√©cis bas√© sur la base de donn√©es des exercices
    const muscleGroups = {
      pectoraux: [
        'd√©velopp√© couch√©', 'd√©velopp√© inclin√©', 'd√©velopp√© d√©clin√©', 'd√©velopp√© halt√®res',
        'pompes', '√©cart√© couch√©', '√©cart√© inclin√©', 'pull-over', 'pec deck'
      ],
      dos: [
        'tractions', 'tractions lest√©es', 'tractions assist√©es', 'rowing barre', 'rowing halt√®res',
        'tirage horizontal', 'tirage vertical', 'soulev√© de terre', 'rowing t-bar', 'shrugs',
        'hyperextensions', 'tirage poulie haute'
      ],
      √©paules: [
        'd√©velopp√© militaire', '√©l√©vations lat√©rales', '√©l√©vations frontales', 'oiseau',
        'd√©velopp√© arnold', 'upright row', 'face pull', 'handstand push-up'
      ],
      biceps: [
        'curl barre', 'curl halt√®res', 'curl marteau', 'curl concentr√©', 'curl pupitre',
        'curl 21', 'traction supination', 'curl c√¢ble'
      ],
      triceps: [
        'dips', 'extension couch√©', 'extension verticale', 'pompes diamant', 'kick back',
        'extension poulie haute', 'd√©velopp√© serr√©'
      ],
      jambes: [
        'squat', 'leg press', 'fentes', 'leg curl', 'leg extension', 'soulev√© de terre roumain',
        'mollets debout', 'mollets assis', 'hack squat', 'goblet squat'
      ],
      abdos: [
        'crunch', 'planche', 'relev√© de jambes', 'russian twist', 'grimpeur',
        'bicycle crunch', 'dead bug', 'hanging knee raise'
      ],
      cardio: [
        'course √† pied', 'v√©lo', 'elliptique', 'rameur', 'tapis de course', 'v√©lo spinning',
        'stepper', 'corde √† sauter', 'burpees', 'sauts √©toiles', 'genoux hauts',
        'mont√©es de genoux', 'sprint', 'marche rapide', 'natation', 'aquabike', 'hiit', 'tabata'
      ]
    };

    for (const [muscle, exercises] of Object.entries(muscleGroups)) {
      if (exercises.some(exercise => exerciseLower.includes(exercise.toLowerCase()))) {
        return muscle;
      }
    }

    // Fallback avec mots-cl√©s g√©n√©riques
    const keywordMapping = {
      pectoraux: ['d√©velopp√©', 'pompes', 'dips', '√©cart√©', 'pec'],
      dos: ['tractions', 'tirage', 'rowing', 'soulev√©', 'pull'],
      jambes: ['squat', 'fentes', 'leg', 'mollets'],
      biceps: ['curl', 'biceps'],
      triceps: ['extension', 'triceps'],
      √©paules: ['militaire', '√©l√©vations', '√©paules'],
      abdos: ['crunch', 'gainage', 'planche', 'abdos'],
      cardio: ['course', 'v√©lo', 'rameur', 'elliptique', 'cardio']
    };

    for (const [muscle, keywords] of Object.entries(keywordMapping)) {
      if (keywords.some(keyword => exerciseLower.includes(keyword))) {
        return muscle;
      }
    }

    return 'pectoraux'; // Groupe par d√©faut
  }, []);

  return {
    isListening,
    transcript,
    isSupported,
    startListening,
    stopListening,
    parseExerciseFromSpeech,
    getMuscleGroupFromExercise,
    checkSupport
  };
};