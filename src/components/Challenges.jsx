import React, { useState } from 'react';
import { useFriends } from '../hooks/useFriends';
import { useChallenges } from '../hooks/useChallenges';
import Card from './Card';
import GradientButton from './GradientButton';
import Modal from './Modal';
import Toast from './Toast';
import ChallengeStats from './ChallengeStats';
import { sendChallengeNotification, createNotification, NOTIFICATION_TYPES } from '../utils/notifications';

const Challenges = ({ user }) => {
  const { friends } = useFriends(user);
  const { 
    challenges, 
    createChallenge, 
    getChallengeScore, 
    formatScore, 
    getChallengeStatus,
    getDetailedStats,
    getSentChallenges,
    getReceivedChallenges,
    getAllUserChallenges,
    acceptChallenge,
    declineChallenge,
    cancelChallenge
  } = useChallenges(user);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [selectedFriend, setSelectedFriend] = useState(null);
  const [challengeType, setChallengeType] = useState('workouts');
  const [challengeDuration, setChallengeDuration] = useState(7);
  const [toast, setToast] = useState(null);
  const [activeTab, setActiveTab] = useState('all'); // 'all', 'sent' ou 'received'

  // Types de d√©fis disponibles
  const challengeTypes = [
    { id: 'workouts', label: 'Nombre de s√©ances', icon: 'üí™' },
    { id: 'duration', label: 'Temps d\'entra√Ænement', icon: '‚è±Ô∏è' },
    { id: 'streak', label: 'S√©rie cons√©cutive', icon: 'üî•' },
    { id: 'calories', label: 'Calories br√ªl√©es', icon: 'üî•' }
  ];

  // Dur√©es disponibles
  const durations = [
    { value: 3, label: '3 jours' },
    { value: 7, label: '1 semaine' },
    { value: 14, label: '2 semaines' },
    { value: 30, label: '1 mois' }
  ];

  const handleCreateChallenge = async () => {
    if (!selectedFriend) {
      setToast({ message: 'S√©lectionne un ami', type: 'error' });
      return;
    }

    const challengeData = {
      type: challengeType,
      duration: challengeDuration,
      friend: selectedFriend,
      createdBy: user.uid,
      senderName: user.displayName || user.email,
      status: 'pending'
    };

    const newChallenge = createChallenge(challengeData);
    
    // Envoyer une notification √† l'ami
    try {
      await sendChallengeNotification(newChallenge, user, selectedFriend.uid);
      setToast({ message: 'D√©fi cr√©√© et notification envoy√©e !', type: 'success' });
    } catch (error) {
      console.error('Erreur lors de l\'envoi de la notification:', error);
      setToast({ message: 'D√©fi cr√©√© mais erreur de notification', type: 'warning' });
    }
    
    setShowCreateModal(false);
    setSelectedFriend(null);
  };

  const getChallengeTypeLabel = (type) => {
    return challengeTypes.find(t => t.id === type)?.label || type;
  };

  const getChallengeIcon = (type) => {
    return challengeTypes.find(t => t.id === type)?.icon || 'üèÜ';
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'victory': return 'text-green-500';
      case 'defeat': return 'text-red-500';
      case 'tie': return 'text-yellow-500';
      default: return 'text-blue-500';
    }
  };

  // Calcul des statistiques
  const getChallengeStats = () => {
    const totalChallenges = challenges.length;
    const completedChallenges = challenges.filter(challenge => 
      new Date() > new Date(challenge.endDate)
    ).length;
    const activeChallenges = totalChallenges - completedChallenges;
    
    const victories = challenges.filter(challenge => {
      const status = getChallengeStatus(challenge);
      return status.status === 'victory';
    }).length;
    
    const winRate = totalChallenges > 0 ? Math.round((victories / totalChallenges) * 100) : 0;
    
    return {
      total: totalChallenges,
      active: activeChallenges,
      completed: completedChallenges,
      victories,
      winRate
    };
  };

  const stats = getChallengeStats();
  const detailedStats = getDetailedStats();
  const sentChallenges = getSentChallenges();
  const receivedChallenges = getReceivedChallenges();
  const allUserChallenges = getAllUserChallenges();

  // Handlers pour les actions sur les d√©fis
  const handleAcceptChallenge = async (challengeId) => {
    try {
      await acceptChallenge(challengeId);
      
      // Notifier le cr√©ateur du d√©fi
      const challenge = challenges.find(c => c.id === challengeId);
      if (challenge && challenge.createdBy) {
        await createNotification(challenge.createdBy, {
          type: NOTIFICATION_TYPES.CHALLENGE_UPDATE,
          title: 'D√©fi accept√© !',
          message: `${user.displayName || user.email} a accept√© ton d√©fi de ${getChallengeTypeLabel(challenge.type)} !`,
          challengeId: challenge.id
        });
      }
      
      setToast({ message: 'D√©fi accept√© !', type: 'success' });
    } catch (error) {
      setToast({ message: 'Erreur lors de l\'acceptation', type: 'error' });
    }
  };

  const handleDeclineChallenge = async (challengeId) => {
    try {
      await declineChallenge(challengeId);
      
      // Notifier le cr√©ateur du d√©fi
      const challenge = challenges.find(c => c.id === challengeId);
      if (challenge && challenge.createdBy) {
        await createNotification(challenge.createdBy, {
          type: NOTIFICATION_TYPES.CHALLENGE_UPDATE,
          title: 'D√©fi refus√©',
          message: `${user.displayName || user.email} a refus√© ton d√©fi de ${getChallengeTypeLabel(challenge.type)}.`,
          challengeId: challenge.id
        });
      }
      
      setToast({ message: 'D√©fi refus√©', type: 'info' });
    } catch (error) {
      setToast({ message: 'Erreur lors du refus', type: 'error' });
    }
  };

  const handleCancelChallenge = async (challengeId) => {
    try {
      await cancelChallenge(challengeId);
      
      // Notifier le destinataire du d√©fi
      const challenge = challenges.find(c => c.id === challengeId);
      if (challenge && challenge.friend.uid) {
        await createNotification(challenge.friend.uid, {
          type: NOTIFICATION_TYPES.CHALLENGE_UPDATE,
          title: 'D√©fi annul√©',
          message: `${user.displayName || user.email} a annul√© le d√©fi de ${getChallengeTypeLabel(challenge.type)}.`,
          challengeId: challenge.id
        });
      }
      
      setToast({ message: 'D√©fi annul√©', type: 'info' });
    } catch (error) {
      setToast({ message: 'Erreur lors de l\'annulation', type: 'error' });
    }
  };

  return (
    <div className="p-4">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-gray-800">D√©fis</h1>
        <GradientButton onClick={() => setShowCreateModal(true)}>
          Cr√©er un d√©fi
        </GradientButton>
      </div>

      {/* Onglets */}
      <div className="flex space-x-1 mb-6 bg-gray-100 p-1 rounded-lg">
        <button
          onClick={() => setActiveTab('all')}
          className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all ${
            activeTab === 'all'
              ? 'bg-white text-indigo-600 shadow-sm'
              : 'text-gray-600 hover:text-gray-800'
          }`}
        >
          Tous mes d√©fis ({allUserChallenges.length})
        </button>
        <button
          onClick={() => setActiveTab('sent')}
          className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all ${
            activeTab === 'sent'
              ? 'bg-white text-indigo-600 shadow-sm'
              : 'text-gray-600 hover:text-gray-800'
          }`}
        >
          Envoy√©s ({sentChallenges.length})
        </button>
        <button
          onClick={() => setActiveTab('received')}
          className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-all ${
            activeTab === 'received'
              ? 'bg-white text-indigo-600 shadow-sm'
              : 'text-gray-600 hover:text-gray-800'
          }`}
        >
          Re√ßus ({receivedChallenges.length})
        </button>
      </div>

      {/* Statistiques des d√©fis */}
      <div className="grid grid-cols-2 md:grid-cols-5 gap-4 mb-6">
        <Card>
          <div className="text-center">
            <div className="text-2xl font-bold text-blue-600">{stats.total}</div>
            <div className="text-sm text-gray-600">Total</div>
          </div>
        </Card>
        <Card>
          <div className="text-center">
            <div className="text-2xl font-bold text-green-600">{stats.active}</div>
            <div className="text-sm text-gray-600">En cours</div>
          </div>
        </Card>
        <Card>
          <div className="text-center">
            <div className="text-2xl font-bold text-purple-600">{stats.completed}</div>
            <div className="text-sm text-gray-600">Termin√©s</div>
          </div>
        </Card>
        <Card>
          <div className="text-center">
            <div className="text-2xl font-bold text-yellow-600">{stats.victories}</div>
            <div className="text-sm text-gray-600">Victoires</div>
          </div>
        </Card>
        <Card>
          <div className="text-center">
            <div className="text-2xl font-bold text-indigo-600">{stats.winRate}%</div>
            <div className="text-sm text-gray-600">Taux de victoire</div>
          </div>
        </Card>
      </div>

      {/* Statistiques d√©taill√©es */}
      {challenges.length > 0 && (
        <div className="mb-6">
          <ChallengeStats stats={detailedStats} />
        </div>
      )}

      {activeTab === 'all' ? (
        // Tous les d√©fis
        allUserChallenges.length === 0 ? (
          <Card>
            <div className="text-center py-8">
              <div className="text-4xl mb-4">üèÜ</div>
              <h3 className="text-lg font-semibold mb-2">Aucun d√©fi</h3>
              <p className="text-gray-600 mb-4">Cr√©e ton premier d√©fi ou attends d'en recevoir un !</p>
              <GradientButton onClick={() => setShowCreateModal(true)}>
                Cr√©er un d√©fi
              </GradientButton>
            </div>
          </Card>
        ) : (
          <div className="space-y-4">
            {allUserChallenges.map(challenge => {
              const myScore = getChallengeScore(challenge);
              const status = getChallengeStatus(challenge);
              const isSentByMe = challenge.createdBy === user?.uid;
              const isPending = challenge.status === 'pending';
              
              return (
                <Card key={challenge.id}>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <div className="text-2xl">{getChallengeIcon(challenge.type)}</div>
                      <div>
                        <h3 className="font-semibold">
                          {isSentByMe 
                            ? `D√©fi vs ${challenge.friend.displayName || challenge.friend.email || 'Utilisateur'}`
                            : `D√©fi de ${challenge.senderName || 'Un ami'}`
                          }
                        </h3>
                        <p className="text-sm text-gray-600">
                          {getChallengeTypeLabel(challenge.type)} ‚Ä¢ {challenge.duration} jours
                        </p>
                        <p className="text-xs text-gray-500">
                          {isSentByMe ? 'Envoy√© par toi' : 'Re√ßu de ' + (challenge.senderName || 'un ami')} ‚Ä¢ Statut: {challenge.status || 'en attente'}
                        </p>
                      </div>
                    </div>
                    <div className="text-right">
                      {isPending && !isSentByMe ? (
                        <div className="flex flex-col space-y-2">
                          <div className="text-sm text-gray-600">En attente de r√©ponse</div>
                          <div className="flex space-x-2">
                            <button
                              onClick={() => handleAcceptChallenge(challenge.id)}
                              className="px-3 py-1 bg-green-500 text-white text-xs rounded hover:bg-green-600"
                            >
                              Accepter
                            </button>
                            <button
                              onClick={() => handleDeclineChallenge(challenge.id)}
                              className="px-3 py-1 bg-red-500 text-white text-xs rounded hover:bg-red-600"
                            >
                              Refuser
                            </button>
                          </div>
                        </div>
                      ) : (
                        <>
                          <div className={`font-bold ${getStatusColor(status.status)}`}>
                            {status.text}
                          </div>
                          <div className="text-sm text-gray-600">
                            {formatScore(myScore, challenge.type)} vs {formatScore(challenge.friendScore || 0, challenge.type)}
                          </div>
                          {isPending && isSentByMe && (
                            <button
                              onClick={() => handleCancelChallenge(challenge.id)}
                              className="mt-2 text-xs text-red-600 hover:text-red-800"
                            >
                              Annuler le d√©fi
                            </button>
                          )}
                        </>
                      )}
                    </div>
                  </div>
                </Card>
              );
            })}
          </div>
        )
      ) : activeTab === 'sent' ? (
        // D√©fis envoy√©s
        sentChallenges.length === 0 ? (
          <Card>
            <div className="text-center py-8">
              <div className="text-4xl mb-4">üèÜ</div>
              <h3 className="text-lg font-semibold mb-2">Aucun d√©fi envoy√©</h3>
              <p className="text-gray-600 mb-4">Cr√©e ton premier d√©fi avec un ami !</p>
              <GradientButton onClick={() => setShowCreateModal(true)}>
                Cr√©er un d√©fi
              </GradientButton>
            </div>
          </Card>
        ) : (
          <div className="space-y-4">
            {sentChallenges.map(challenge => {
              const myScore = getChallengeScore(challenge);
              const status = getChallengeStatus(challenge);
              return (
                <Card key={challenge.id}>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <div className="text-2xl">{getChallengeIcon(challenge.type)}</div>
                      <div>
                        <h3 className="font-semibold">D√©fi vs {challenge.friend.displayName || challenge.friend.email || 'Utilisateur'}</h3>
                        <p className="text-sm text-gray-600">
                          {getChallengeTypeLabel(challenge.type)} ‚Ä¢ {challenge.duration} jours
                        </p>
                        <p className="text-xs text-gray-500">
                          Statut: {challenge.status || 'en attente'}
                        </p>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className={`font-bold ${getStatusColor(status.status)}`}>
                        {status.text}
                      </div>
                      <div className="text-sm text-gray-600">
                        {formatScore(myScore, challenge.type)} vs {formatScore(challenge.friendScore || 0, challenge.type)}
                      </div>
                      {challenge.status === 'pending' && (
                        <button
                          onClick={() => handleCancelChallenge(challenge.id)}
                          className="mt-2 text-xs text-red-600 hover:text-red-800"
                        >
                          Annuler le d√©fi
                        </button>
                      )}
                    </div>
                  </div>
                </Card>
              );
            })}
          </div>
        )
      ) : (
        // D√©fis re√ßus
        receivedChallenges.length === 0 ? (
          <Card>
            <div className="text-center py-8">
              <div className="text-4xl mb-4">üì®</div>
              <h3 className="text-lg font-semibold mb-2">Aucun d√©fi re√ßu</h3>
              <p className="text-gray-600 mb-4">Tes amis peuvent t'envoyer des d√©fis !</p>
            </div>
          </Card>
        ) : (
          <div className="space-y-4">
            {receivedChallenges.map(challenge => {
              const myScore = getChallengeScore(challenge);
              const status = getChallengeStatus(challenge);
              const isPending = challenge.status === 'pending';
              
              return (
                <Card key={challenge.id}>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <div className="text-2xl">{getChallengeIcon(challenge.type)}</div>
                      <div>
                        <h3 className="font-semibold">D√©fi de {challenge.createdBy === user?.uid ? 'toi' : (challenge.senderName || 'Un ami')}</h3>
                        <p className="text-sm text-gray-600">
                          {getChallengeTypeLabel(challenge.type)} ‚Ä¢ {challenge.duration} jours
                        </p>
                        <p className="text-xs text-gray-500">
                          Statut: {challenge.status || 'en attente'}
                        </p>
                      </div>
                    </div>
                    <div className="text-right">
                      {isPending ? (
                        <div className="flex flex-col space-y-2">
                          <div className="text-sm text-gray-600">En attente de r√©ponse</div>
                          <div className="flex space-x-2">
                            <button
                              onClick={() => handleAcceptChallenge(challenge.id)}
                              className="px-3 py-1 bg-green-500 text-white text-xs rounded hover:bg-green-600"
                            >
                              Accepter
                            </button>
                            <button
                              onClick={() => handleDeclineChallenge(challenge.id)}
                              className="px-3 py-1 bg-red-500 text-white text-xs rounded hover:bg-red-600"
                            >
                              Refuser
                            </button>
                          </div>
                        </div>
                      ) : (
                        <>
                          <div className={`font-bold ${getStatusColor(status.status)}`}>
                            {status.text}
                          </div>
                          <div className="text-sm text-gray-600">
                            {formatScore(myScore, challenge.type)} vs {formatScore(challenge.friendScore || 0, challenge.type)}
                          </div>
                        </>
                      )}
                    </div>
                  </div>
                </Card>
              );
            })}
          </div>
        )
      )}

      {/* Modal de cr√©ation de d√©fi */}
      <Modal isOpen={showCreateModal} onClose={() => setShowCreateModal(false)}>
        <div className="p-6">
          <h2 className="text-xl font-bold mb-4">Cr√©er un nouveau d√©fi</h2>
          
          <div className="mb-4">
            <label className="block text-sm font-medium mb-2">Choisir un ami</label>
            {friends.length === 0 ? (
              <div className="p-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-500">
                Aucun ami trouv√©. Ajoute des amis depuis l'onglet "Amis" d'abord !
              </div>
            ) : (
              <select 
                className="w-full p-3 border border-gray-300 rounded-lg"
                value={selectedFriend?.uid || ''}
                              onChange={(e) => {
                const friend = friends.find(f => f.uid === e.target.value);
                setSelectedFriend(friend);
              }}
              >
                <option value="">S√©lectionner un ami</option>
                {friends.map(friend => (
                  <option key={friend.uid} value={friend.uid}>
                    {friend.displayName || friend.email || 'Utilisateur'}
                  </option>
                ))}
              </select>
            )}
            <div className="text-xs text-gray-500 mt-1">
              {friends.length} ami(s) trouv√©(s)
            </div>
          </div>

          <div className="mb-4">
            <label className="block text-sm font-medium mb-2">Type de d√©fi</label>
            <div className="grid grid-cols-2 gap-2">
              {challengeTypes.map(type => (
                <button
                  key={type.id}
                  className={`p-3 border rounded-lg text-left ${
                    challengeType === type.id 
                      ? 'border-blue-500 bg-blue-50' 
                      : 'border-gray-300'
                  }`}
                  onClick={() => setChallengeType(type.id)}
                >
                  <div className="text-lg">{type.icon}</div>
                  <div className="text-sm font-medium">{type.label}</div>
                </button>
              ))}
            </div>
          </div>

          <div className="mb-6">
            <label className="block text-sm font-medium mb-2">Dur√©e du d√©fi</label>
            <select 
              className="w-full p-3 border border-gray-300 rounded-lg"
              value={challengeDuration}
              onChange={(e) => setChallengeDuration(Number(e.target.value))}
            >
              {durations.map(duration => (
                <option key={duration.value} value={duration.value}>
                  {duration.label}
                </option>
              ))}
            </select>
          </div>

          <div className="flex space-x-3">
            <button
              className="flex-1 p-3 border border-gray-300 rounded-lg"
              onClick={() => setShowCreateModal(false)}
            >
              Annuler
            </button>
            <GradientButton onClick={handleCreateChallenge} className="flex-1">
              Cr√©er le d√©fi
            </GradientButton>
          </div>
        </div>
      </Modal>

      {toast && (
        <Toast 
          message={toast.message} 
          type={toast.type} 
          onClose={() => setToast(null)} 
        />
      )}
    </div>
  );
};

export default Challenges; 