#!/usr/bin/env node

/**
 * Script de nettoyage et maintenance du projet Ici Ca Pousse
 * Usage: node scripts/cleanup.js
 */

const fs = require('fs');
const path = require('path');

console.log('üßπ Nettoyage du projet Ici Ca Pousse...\n');

// Fichiers et dossiers √† v√©rifier et nettoyer
const cleanupTasks = [
  {
    name: 'V√©rification des fichiers de test',
    check: () => {
      const testDir = path.join(__dirname, '../src/tests');
      const files = fs.readdirSync(testDir);
      const oldTestFiles = files.filter(
        (file) =>
          file !== 'features' &&
          file.endsWith('.test.js') &&
          file !== 'allFeatures.test.js'
      );

      if (oldTestFiles.length > 0) {
        console.log(
          `‚ùå Fichiers de test obsol√®tes trouv√©s: ${oldTestFiles.join(', ')}`
        );
        return false;
      }
      console.log('‚úÖ Fichiers de test propres');
      return true;
    },
  },
  {
    name: 'V√©rification de la structure des utils',
    check: () => {
      const utilsDir = path.join(__dirname, '../src/utils');
      const expectedDirs = ['ai', 'firebase', 'workout'];

      for (const dir of expectedDirs) {
        const dirPath = path.join(utilsDir, dir);
        if (!fs.existsSync(dirPath)) {
          console.log(`‚ùå Dossier manquant: src/utils/${dir}`);
          return false;
        }

        const indexFile = path.join(dirPath, 'index.js');
        if (!fs.existsSync(indexFile)) {
          console.log(`‚ùå Fichier index.js manquant dans src/utils/${dir}`);
          return false;
        }
      }
      console.log('‚úÖ Structure des utils organis√©e');
      return true;
    },
  },
  {
    name: 'V√©rification des fichiers de configuration',
    check: () => {
      const rootDir = __dirname + '/..';
      const files = fs.readdirSync(rootDir);

      // Fichiers qui ne devraient plus exister
      const unwantedFiles = [
        'tsconfig.json',
        'REFACTORING_NOTES.md',
        'firebase-storage-rules-backup.txt',
      ];

      for (const file of unwantedFiles) {
        if (fs.existsSync(path.join(rootDir, file))) {
          console.log(`‚ùå Fichier ind√©sirable trouv√©: ${file}`);
          return false;
        }
      }
      console.log('‚úÖ Fichiers de configuration propres');
      return true;
    },
  },
  {
    name: 'V√©rification de la documentation',
    check: () => {
      const rootDir = __dirname + '/..';
      const docsDir = path.join(rootDir, 'docs');
      const requiredDocs = [
        'README.md', // √Ä la racine
      ];
      const docsInDocsFolder = [
        'PROJECT_STRUCTURE.md',
        'ARCHITECTURE.md',
        'FIREBASE_SETUP.md',
      ];

      // V√©rifier README.md √† la racine
      if (!fs.existsSync(path.join(rootDir, 'README.md'))) {
        console.log(`‚ùå Documentation manquante: README.md`);
        return false;
      }

      // V√©rifier les docs dans le dossier docs/
      for (const doc of docsInDocsFolder) {
        if (!fs.existsSync(path.join(docsDir, doc))) {
          console.log(`‚ùå Documentation manquante: docs/${doc}`);
          return false;
        }
      }
      console.log('‚úÖ Documentation compl√®te');
      return true;
    },
  },
];

// Ex√©cuter les t√¢ches de nettoyage
let allClean = true;

for (const task of cleanupTasks) {
  console.log(`\nüîç ${task.name}...`);
  if (!task.check()) {
    allClean = false;
  }
}

console.log('\n' + '='.repeat(50));

if (allClean) {
  console.log('üéâ Projet propre et bien organis√© !');
  console.log('\nüìã Actions recommand√©es:');
  console.log('  ‚Ä¢ npm test - V√©rifier que tous les tests passent');
  console.log('  ‚Ä¢ npm run build - V√©rifier le build de production');
  console.log("  ‚Ä¢ npm start - Tester l'application en d√©veloppement");
} else {
  console.log('‚ö†Ô∏è  Probl√®mes d√©tect√©s. Veuillez les corriger.');
  console.log('\nüîß Actions recommand√©es:');
  console.log('  ‚Ä¢ Supprimer les fichiers obsol√®tes');
  console.log('  ‚Ä¢ R√©organiser la structure si n√©cessaire');
  console.log('  ‚Ä¢ Mettre √† jour la documentation');
}

console.log('\nüìö Documentation:');
console.log('  ‚Ä¢ README.md - Guide principal (racine)');
console.log('  ‚Ä¢ docs/PROJECT_STRUCTURE.md - Structure d√©taill√©e du projet');
console.log('  ‚Ä¢ docs/ARCHITECTURE.md - Architecture technique');
